import numpy as np
import matplotlib
matplotlib.use('TKAgg')
import matplotlib.pyplot as plt



env1 = [

            [(5, 10, 10), (7, 14, 20)],
            [(5, 16, 10), (7, 18, 20)],
            [(5, 14, 10), (7, 16, 12)],
            [(5, 14, 18), (7, 16, 20)],

            [(10, 0, 0), (20, 10, 30)],
            [(10, 20, 0), (20, 30, 30)],
            [(10, 10, 0), (20, 20, 10)],
            [(10, 10, 20), (20, 20, 30)]
        ]


env2 = [
            [(3, 0, 0), (4, 30, 5)],
            [(3, 0, 5), (4, 5, 14)],
            [(3, 5, 5), (4, 10, 20)],
            [(3, 10, 5), (4, 15, 25)],
            [(3, 15, 5), (4, 20, 22)],
            [(3, 20, 5), (4, 25, 17)],
            [(3, 25, 5), (4, 30, 14)],

            [(5, 10, 10), (7, 14, 20)],
            [(5, 16, 10), (7, 18, 20)],
            [(5, 14, 10), (7, 16, 12)],
            [(5, 14, 18), (7, 16, 20)],

            [(10, 0, 0), (20, 10, 30)],
            [(10, 20, 0), (20, 30, 30)],
            [(10, 10, 0), (20, 20, 10)],
            [(10, 10, 20), (20, 20, 30)]
        ]


env3 = [
            [(0, 0, 0), (4, 1, 1)],
            [(0, 1, 0), (3, 2, 1)],
            [(1, 0, 1), (2, 1, 3)],

            [(1, 2, 0), (2, 4, 3)],
            [(1, 4, 1), (2, 5, 2)],
            [(1, 5, 0), (2, 8, 3)],
            [(2, 7, 0), (4, 8, 3)],
            [(4, 7, 1), (7, 8, 2)],
            [(6, 7, 2), (7, 8, 3)],

            [(4, 3, 0), (5, 6, 3)],
            [(5, 5, 0), (7, 6, 1)],
            [(7, 3, 0), (8, 6, 2)],

            [(7, 9, 0), (8, 10, 3)],
            [(8, 8, 0), (9, 10, 3)],
            [(9, 7, 0), (10, 10, 3)],
]


env4 = [
            [(0, 0, 0), (1, 1, 1)],

            [(0, 2, 1), (1, 4, 2)],
            [(0, 3, 0), (1, 6, 1)],

            [(3, 0, 0), (4, 1, 2)],
            [(3, 1, 1), (4, 2, 3)],
            [(3, 2, 2), (7, 3, 3)],

            [(3, 5, 0), (4, 6, 3)],
            [(3, 6, 0), (4, 7, 2)],
            [(3, 9, 0), (4, 10, 2)],
            [(3, 10, 0), (4, 11, 3)],
            [(3, 11, 0), (4, 12, 1)],
            [(4, 10, 0), (5, 11, 2)],
            [(5, 10, 0), (6, 11, 1)],


            [(5, 0, 0), (6, 3, 1)],
            [(5, 1, 1), (6, 2, 3)],

            [(6, 2, 2), (7, 7, 3)],
            [(6, 4, 0), (8, 7, 2)],
            [(5, 7, 0), (7, 8, 3)],

            [(8, 0, 0), (9, 1, 2)],
            [(9, 0, 0), (10, 2, 1)],
            [(10, 1, 0), (11, 3, 1)],
            [(11, 2, 0), (12, 4, 1)],

            [(10, 6, 0), (11, 7, 2)],
            [(11, 11, 0), (12, 12, 1)],

            [(8, 11, 0), (9, 12, 3)],
            [(9, 11, 1), (10, 12, 2)],
]


env5 = [
            [(0, 2, 0), (1, 3, 3)],

            [(3, 0, 0), (4, 4, 3)],
            [(3, 4, 0), (4, 5, 1)],
            [(3, 5, 0), (4, 9, 3)],

            [(6, 0, 0), (7, 1, 3)],
            [(7, 0, 0), (8, 1, 1)],
            [(6, 1, 2), (7, 12, 3)],

            [(6, 4, 0), (8, 12, 1)],
            [(6, 4, 1), (8, 5, 2)],
            [(6, 6, 1), (8, 7, 2)],
            [(6, 8, 2), (12, 9, 3)],
            [(6, 8, 1), (7, 12, 2)],
            [(8, 8, 0), (12, 9, 1)],
            [(11, 8, 1), (12, 9, 2)],

            [(9, 11, 0), (11, 12, 1)],

]



def set_axes_equal(ax):
    """让三维图的坐标轴比例一致"""
    extents = np.array([ax.get_xlim3d(), ax.get_ylim3d(), ax.get_zlim3d()])
    centers = np.mean(extents, axis=1)
    max_range = np.max(extents[:, 1] - extents[:, 0]) / 2

    for ctr, axlim in zip(centers, [ax.set_xlim3d, ax.set_ylim3d, ax.set_zlim3d]):
        axlim([ctr - max_range, ctr + max_range])


def _draw_obstacle(ax,x1, y1, z1, x2, y2, z2):
    # 障碍物
    x = [x1, x2]
    y = [y1, y2]
    z = [z1, z2]
    xx, yy = np.meshgrid(x, y)

    ax.plot_surface(xx, yy, np.full_like(xx, z1), color='gray', alpha=1)
    ax.plot_surface(xx, yy, np.full_like(xx, z2), color='gray', alpha=1)

    yy, zz = np.meshgrid(y, z)
    ax.plot_surface(np.full_like(yy, x1), yy, zz, color='gray', alpha=1)
    ax.plot_surface(np.full_like(yy, x2), yy, zz, color='gray', alpha=1)

    xx, zz = np.meshgrid(x, z)
    ax.plot_surface(xx, np.full_like(xx, y1), zz, color='gray', alpha=1)
    ax.plot_surface(xx, np.full_like(xx, y2), zz, color='gray', alpha=1)



if __name__ == '__main__':
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    for (x1, y1, z1), (x2, y2, z2) in env3:
        _draw_obstacle(ax,x1, y1, z1, x2, y2, z2)

    set_axes_equal(ax)
    ax.set_zlim(0, 10)  # 调整 Z 轴范围
    plt.show()
